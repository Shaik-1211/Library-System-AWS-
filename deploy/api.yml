openapi: 3.0.0
info:
  title: Serverless Library System API
  description: This is the Swagger Specification of the "Serverless Library System API"
  version: 1.0.0
servers:
  - url: http://libray.atom.cloud/
tags:
  - name: user
    description: Operations that user can perform

paths:
  /books:
    get:
      tags:
        - user
      description: Get all the books from DynamoDB
      responses:
        "200":
          description: Successfully sent the books list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bookObject"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"

    post:
      tags:
        - user
      description: Add a book to the list of books
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bookObject"
        required: true
      responses:
        "200":
          description: Successfully added the book to the list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inlineResponse200"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"

    delete:
      tags:
        - user
      description: Delete a book from the list of books
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bookObject"
      responses:
        "200":
          description: Successfully deleted the book from the list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inlineResponse200"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"

    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - user
      responses:
        200:
          description: Default response for CORS method
          content : {
              application/json : {
                schema : {
                  $ref : "#/components/schemas/bookResponse"
                }
            }}
          # headers:
          #   statusCode:
          #     schema:
          #       type: number
          #   Access-Control-Allow-Origin:
          #     schema:
          #       type: string
          #   Access-Control-Allow-Methods:
          #     schema:
          #       type: string
          #   Access-Control-Allow-Headers:
          #     schema:
          #       type: string
          # content: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
        # responses:
        #   default:
        #   statusCode: "200"
        #   responseParameters:
        #     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        #     method.response.header.Access-Control-Allow-Methods: "'*'"
        #     method.response.header.Access-Control-Allow-Origin: "'*'"
        #   responseTemplates:
        #     application/json: |
        #       {}
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"

# components:
#   schemas:
#     bookObject:
#       properties:
#         bookId:
#           type: integer
#           example: 1
#         bookName:
#           type: string
#           example: Zero to One
#         author:
#           type: string
#           example: Peter Theil
#       description: Book info
#       type: object
#     inlineResponse200:
#       type: object
#       properties:
#         status:
#           type: string
#           example: ok
#           maxLength: 5

components :
  schemas : {
    bookResponse : {
      type : object,
      properties : {
        items: {
          type : array,
          properties: {
            book_name: {
              type : string,
              example : One
              },
              book_id : 
              }}
      }
    }
    }

